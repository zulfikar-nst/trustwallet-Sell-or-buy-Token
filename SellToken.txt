from web3 import Web3
import json
import config
import time

bsc = "https://bsc-dataseed.binance.org/"
web3 = Web3(Web3.HTTPProvider(bsc))
print(web3.isConnected())
#pancakeswap router
panRouterContractAddress = '0x10ED43C718714eb63d5aA57B78B54704E256024E'
#pancakeswap router abi 
panabi = open('fileabi.txt','r').read().replace('\n','')
sender_address = "0xa03b03522090543120a3dbc772b848FE744C41ac"#address
spend = web3.toChecksumAddress("0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c")  #WBNB Address
#Get BNB Balance
balance = web3.eth.get_balance(sender_address)
print(balance)
humanReadable = web3.fromWei(balance,'ether')
print(humanReadable)
private="ceac805f063679e4b572f632afac320c24cfe491aed92ba7138cd3b2cd05f112"#P key
contract_id = web3.toChecksumAddress("0x8e984e03ab35795c60242c902ece2450242c90e9")#contract Token
contract = web3.eth.contract(address=panRouterContractAddress, abi=panabi)
sellAbi = sellAbi = open('sellabi.txt','r').read().replace('\n','')
sellTokenContract = web3.eth.contract(contract_id, abi=sellAbi)
balance = sellTokenContract.functions.balanceOf(sender_address).call()
symbol = sellTokenContract.functions.symbol().call()
readable = web3.fromWei(balance,'ether')
print("Balance: " + str(readable) + " " + symbol)
#Enter amount of token to sell
tokenValue = web3.toWei(95, 'ether')
#Approve Token before Selling
tokenValue2 = web3.fromWei(tokenValue, 'ether')
start = time.time()
approve = sellTokenContract.functions.approve(panRouterContractAddress, balance).buildTransaction({
            'from': sender_address,
            'gasPrice': web3.toWei('5','gwei'),
            'nonce': web3.eth.get_transaction_count(sender_address),
            })

signed_txn = web3.eth.account.sign_transaction(approve, private_key=private)
tx_token = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
print("Approved: " + web3.toHex(tx_token))

time.sleep(10)
pancakeswap2_txn = contract.functions.swapExactTokensForETH(
            tokenValue ,95, 
            [contract_id, spend],
            sender_address,
            (int(time.time()) + 1000000)

            ).buildTransaction({
            'from': sender_address,
            'gasPrice': web3.toWei('5','gwei'),
            'nonce': web3.eth.get_transaction_count(sender_address),
            })
    
signed_txn = web3.eth.account.sign_transaction(pancakeswap2_txn, private_key=private)
tx_token = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
print(web3.toHex(tx_token))
